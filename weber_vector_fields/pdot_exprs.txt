function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 15))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 5)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))))), (/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 13)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))))), (/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 3))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 5))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 3))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 11))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 13))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), (+)((/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 11)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))), (/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 15))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 5))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))))), (/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 11))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))))), (+)((/)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 3)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 13))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 1)), (*)(-2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 2))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 2))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 2))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))))), (/)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), (+)((/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 2))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 2))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 2))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 2))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), (+)((/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 2))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))))), (/)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))))), (+)((/)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 2)), (*)(-2, (getindex)(qs, 4)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), (+)((/)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2)))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 3)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))))), (/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 3)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))))), (/)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))))), (/)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 3))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 3))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 5)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))), (/)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 3))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))))), (/)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 3))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 3))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 3))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 3))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 3))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 3)), (*)(-2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))))), (/)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))))), (/)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 2)), (getindex)(ps, 4)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 4)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 3))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 4))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 4))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))))), (/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 4))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))))), (/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 4))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 4))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 4)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))), (/)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 4)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 3)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))), (/)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2)), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 5))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))))), (/)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 3)), (getindex)(ps, 5)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 5)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))))), (/)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 5))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 5)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))))), (/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 5)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))))), (+)((/)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 5))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 5))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 5)), (*)(-2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))))), (/)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2)), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))))), (/)((+)((*)(-1, (getindex)(ps, 4)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 6)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 5))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 6)), (*)(-2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 6)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 2)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))))), (+)((/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))))), (+)((/)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 6)), (*)(-2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 5))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 6))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 5)))), (abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 6))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))), (/)((+)((*)(-1, (getindex)(ps, 5)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 7)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), (+)((/)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))))), (+)((/)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 7)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((*)(-1, (getindex)(ps, 3)), (getindex)(ps, 7)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 7)), (*)(-2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 7)), (*)(-2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(-2, (getindex)(qs, 6)), (*)(2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))))), (+)((/)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), (+)((/)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 6)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 6)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((*)(-1, (getindex)(ps, 4)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 4)), (*)(2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 4), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 4), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 7))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 6)), (*)(2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 6), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 7)))), (abs2)((+)((getindex)(qs, 6), (*)(-1, (getindex)(qs, 8))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))))), (/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 16)), (*)(2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 2)), (*)(2, (getindex)(qs, 8)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 7))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))), (*)((+)((getindex)(ps, 2), (*)(-1, (getindex)(ps, 8))), (+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))))), (/)((+)((*)(-1, (getindex)(ps, 2)), (getindex)(ps, 8)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 2), (*)(-1, (getindex)(qs, 8)))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 7)))))), 2)))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2)), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 7)), (*)(2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 7)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 7)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))))), (/)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))))), (/)((+)((*)(-1, (getindex)(ps, 5)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 5)), (*)(2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 3)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 3)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 7)), (*)(2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 15)), (*)(2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))))), (/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), (+)((/)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2)))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), (+)((/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 14)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2)), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))))), (/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 2))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 14))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 12))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))))), (/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))), (*)((+)((getindex)(ps, 5), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 16))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 4))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (*)((+)((getindex)(ps, 3), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 12))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 14))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))))), (+)((/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 12)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 5), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 2))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 4))), (abs2)((+)((getindex)(qs, 3), (*)(-1, (getindex)(qs, 9))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 2))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 2)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))), (*)((+)((getindex)(ps, 7), (*)(-1, (getindex)(ps, 9))), (+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))))), (/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 7), (*)(-1, (getindex)(qs, 9)))), (abs2)((+)((*)(-1, (getindex)(qs, 10)), (getindex)(qs, 8))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))))), (+)((/)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 10)), (*)(-2, (getindex)(qs, 16))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))))), (+)((/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 3))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 13))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 3))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 15))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 11))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))))), (/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 11)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))), (/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 11)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 15))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 13))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))))), (/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))))), (/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))))), (/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 5))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), (+)((/)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 13)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 11))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 11)), (*)(-2, (getindex)(qs, 3))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 2))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), (+)((/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 14)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 12))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))))), (+)((/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 4))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 4))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 2))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))))), (+)((/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))))), (/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 16))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 12))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 14))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))))), (+)((/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 4))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 4))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 3)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 12)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 12))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))), (*)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))))), (/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 12)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 12)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 14))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 16))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 11)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 12)), (*)(-2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 11))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (*)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))))), (/)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 2))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 11)))), (abs2)((+)((*)(-1, (getindex)(qs, 12)), (getindex)(qs, 2))))), 2)))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 13))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))))), (/)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 5))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 7))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 7))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))))), (/)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 15))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 9))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 5))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 3))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), (+)((/)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 5))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 3))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 9))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 13))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 13))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))))), (+)((/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 13)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 13)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 15))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 13)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 13)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))))), (/)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 13)), (*)(-2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))))), (/)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 3))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 13))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 6))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))))), (/)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 8))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 2))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 4))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 16))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 14))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 14))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 14))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 16))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), (+)((/)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 8))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 7))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 8)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))))), (/)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 2))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 14)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))))), (/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 14)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 6))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 5))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 6)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 4))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 14))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 13)))), (abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 14))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 2))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 13))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 2))), (abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 13))))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 14)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 14))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))))), (/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 14)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 14)))), (abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 9))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), (+)((/)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 4))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 14)), (*)(-2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 13)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 14)), (getindex)(qs, 4))))), 2)))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 3)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))))), (/)((+)((getindex)(ps, 15), (*)(-1, (getindex)(ps, 3))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2)), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 9))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))))), (+)((/)((+)((getindex)(ps, 15), (*)(-1, (getindex)(ps, 7))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 7)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 5))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 15))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 7))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))))), (+)((/)((+)((getindex)(ps, 15), (*)(-1, (getindex)(ps, 5))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 5)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 9))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 3))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), (+)((/)((+)((*)(-1, (getindex)(ps, 1)), (getindex)(ps, 15)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 15))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))))), (/)((+)((*)(-1, (getindex)(ps, 11)), (getindex)(ps, 15)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 15)))), (/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))))), (/)((+)((*)(-1, (getindex)(ps, 13)), (getindex)(ps, 15)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 7))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 1)), (*)(2, (getindex)(qs, 15))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 5))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 3))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 15))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 13)), (*)(2, (getindex)(qs, 15))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))))), (+)((/)((+)((getindex)(ps, 15), (*)(-1, (getindex)(ps, 9))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 15)), (*)(-2, (getindex)(qs, 9)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 11)), (*)(2, (getindex)(qs, 15))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))))))
            end
        end
end
------
function (qs, ps)
    #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =# @inbounds begin
            #= C:\Users\elect\.julia\packages\Symbolics\ociKG\src\build_function.jl:124 =#
            begin
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:389 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:390 =#
                #= C:\Users\elect\.julia\packages\SymbolicUtils\6fncq\src\code.jl:391 =#
                (+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((+)((/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 6))), (/)((*)(1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 6))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 16))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 4))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))))), (+)((/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 6)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 5)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 6)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))))), (/)((+)((getindex)(ps, 16), (*)(-1, (getindex)(ps, 6))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5)))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 6))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 5))))), 2))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), (+)((/)((+)((getindex)(ps, 16), (*)(-1, (getindex)(ps, 4))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 4)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 16))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 2))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 16))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 2))), (/)(-1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))))), (/)((*)((*)(1//100, (+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 11), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 12), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))))), (/)((+)((*)(-1, (getindex)(ps, 12)), (getindex)(ps, 16)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 12)), (*)(2, (getindex)(qs, 16))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 12), (*)(-1, (getindex)(qs, 16)))), (abs2)((+)((getindex)(qs, 11), (*)(-1, (getindex)(qs, 15))))))))), (/)((*)((*)(1//100, (+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))))), (+)((/)((+)((getindex)(ps, 16), (*)(-1, (getindex)(ps, 8))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 8)))), (/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 8))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 7)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 8)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7)))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))))), (+)((/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))))), (/)((+)((*)(-1, (getindex)(ps, 10)), (getindex)(ps, 16)), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), (+)((/)((+)((*)(-1, (getindex)(ps, 14)), (getindex)(ps, 16)), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), (/)((*)((*)(-1, (+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 16)))), (/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (/)((*)((+)((*)(-2, (getindex)(qs, 10)), (*)(2, (getindex)(qs, 16))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 10), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))), (*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 9)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 9))), (abs2)((+)((getindex)(qs, 10), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((+)((*)(-2, (getindex)(qs, 14)), (*)(2, (getindex)(qs, 16))), (/)((*)(1//200, (^)((/)((+)((*)((+)((getindex)(ps, 13), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (*)((+)((getindex)(ps, 14), (*)(-1, (getindex)(ps, 16))), (+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16)))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 13), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((getindex)(qs, 14), (*)(-1, (getindex)(qs, 16))))))))), (/)((*)((*)(-1//100, (+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), (+)((/)((+)((getindex)(ps, 16), (*)(-1, (getindex)(ps, 2))), NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))))), (/)((*)((*)(-1, (+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 2)))), (/)((+)((*)((+)((getindex)(ps, 1), (*)(-1, (getindex)(ps, 15))), (+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 2)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2)))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))))))), (^)(NaNMath.sqrt((+)((abs2)((+)((getindex)(qs, 1), (*)(-1, (getindex)(qs, 15)))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 2))))), 2))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 4))), (/)((*)(-1//200, (^)((/)((+)((*)((+)((*)(-1, (getindex)(ps, 15)), (getindex)(ps, 3)), (+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (*)((+)((*)(-1, (getindex)(ps, 16)), (getindex)(ps, 4)), (+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))), NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))), 2)), (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 3))), (abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 4)))))))), (/)((*)((+)((*)(2, (getindex)(qs, 16)), (*)(-2, (getindex)(qs, 8))), (/)(1, (^)(NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))), 2))), (*)(2, NaNMath.sqrt((+)((abs2)((+)((*)(-1, (getindex)(qs, 16)), (getindex)(qs, 8))), (abs2)((+)((*)(-1, (getindex)(qs, 15)), (getindex)(qs, 7))))))))
            end
        end
end
------
